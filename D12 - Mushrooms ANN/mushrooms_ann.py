# -*- coding: utf-8 -*-
"""mushrooms-ann.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xe6M3UXSZh-bl_nsHWhUqZjkLTf5r63L
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split

from google.colab import files 
uploaded = files.upload()

import io

df = pd.read_csv(io.BytesIO(uploaded['mushrooms.csv'])) 
print(df)

df.head()

df.shape

df.columns

df.describe()

df.groupby(['class', 'odor']).count() #to check if odor has an emphasis on class

"""We only have one overlapping class  - n class. This can be sorted by an ML algorithm."""

labels = df['class']

features = df.drop(columns = 'class')

labels[0:5]

features[0:5]

labels.replace('p', 0, inplace=True)
labels.replace('e', 1, inplace=True)

labels[0:5]

features = pd.get_dummies(features)
features[0:5]

features = features.values.astype('float32')
labels = labels.values.astype('float32')

features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2)
features_train, features_validation, labels_train, labels_validation = train_test_split(features_train, labels_train, test_size=0.2)

model = keras.Sequential([keras.layers.Dense(32, input_shape=(117,)),
                          keras.layers.Dense(20, activation=tf.nn.relu),
                          keras.layers.Dense(2, activation='softmax')])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['acc'])

history = model.fit(features_train, labels_train, epochs=20, validation_data=(features_validation, labels_validation))

prediction_features = model.predict(features_test)
performance = model.evaluate(features_test, labels_test)
print(performance)

"""Testing Overfitting -"""

history_dict = history.history
history_dict.keys()

loss = history_dict['loss']
acc = history_dict['acc']
val_loss = history_dict['val_loss']
val_acc = history_dict['val_acc']

epochs = range(1, len(acc) + 1)

plt.plot(epochs, loss, 'bo', label='Training Loss')

plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')

plt.legend()
plt.show()

